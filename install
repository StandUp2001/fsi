#!/usr/bin/env python3  # noqa: EXE001

import os
from typing import NoReturn
import subprocess
import platform
import urllib.request
import urllib.error

REPO_URL = "https://github.com/StandUp2001/fsi/releases/latest/download/fsi"


def die(message: str) -> NoReturn:
    """
    Quit program with error.

    Args:
        message (str): The error message to display before exiting.
    """
    print(f"[ERROR]: {message}")
    exit(1)


def execute(commands: list[str], err_message: str) -> None:
    """
    Execute a list of commands.

    Args:
        commands (list[str]): A list of commands to execute.
        message (str): A message to display in case of failure.

    Returns:
        None

    Note:
        This function runs the specified commands using subprocess.run().
        It redirects the standard output and standard error streams to DEVNULL,
        and does not raise an exception if the process returns a non-zero exit status.
        If the process returns a non-zero exit status, it calls the die() function with the provided message.
    """
    process_exe = subprocess.run(
        commands,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=False,
    )

    if process_exe == 1:  # type: ignore
        die(err_message)


def get_exe_name() -> str:
    """
    Get the executable name based on the platform.

    Returns:
        str: The executable name based on the platform.
    """
    match platform.system().lower():
        case "darwin":
            return "mac_arm64" if platform.machine().lower() == "arm64" else "mac_x64"
        case "linux":
            if platform.machine().lower() == "arm64":
                die(f"Platform is not supported: {platform.system()}")
            return "linux_x64"
        case _:
            die(f"Your platform is not supported: {platform.system()}")


def main():
    bin_dir = f"{os.getenv('HOME')}/.local/bin"
    install_mod = os.path.join(bin_dir, "fsi")

    os.makedirs(bin_dir, exist_ok=True)
    try:
        with urllib.request.urlopen(f"{REPO_URL}_{get_exe_name()}") as response:
            data = response.read()
            with open(install_mod, "wb") as f:
                f.write(data)
    except urllib.error.HTTPError as e:
        die(f"Failed to download file: {e}")
    except urllib.error.URLError as e:
        die(f"Failed to connect to the server: {e}")
    except Exception as e:  # noqa: BLE001
        die(f"An error occurred: {e}")

    os.chmod(install_mod, 755)

    if path := os.getenv("PATH"):
        if os.path.expanduser(bin_dir) in path:
            print("\nInstallation complete")
            return

        print(f"This system doesn't have {bin_dir} in its PATH.")
        print("  We try to add it for you.")

        if shell := os.getenv("SHELL"):
            print("Execute this command to add fsi to your path")
            match shell.split("/")[-1]:
                case "zsh":
                    print(f"echo path += '{bin_dir}' >> ~/.zshrc")
                    print("echo EXPORT PATH >> ~/.zshrc")
                case "bash":
                    print(f"echo PATH={bin_dir}:$PATH >> ~/.bashrc")
                case _:
                    die(f"You need to add {bin_dir} to your shell")


if __name__ == "__main__":
    main()
